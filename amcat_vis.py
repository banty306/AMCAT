# -*- coding: utf-8 -*-
"""Amcat_vis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pPREaoUqa6Ge3sJ1abGVsenVceySYiCX
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import style
plt.style.use(['dark_background'])

import seaborn as sns
sns.set(color_codes=True)

import matplotlib.pyplot as plt
from matplotlib import style
plt.style.use(['dark_background'])

import urllib.request
import json

import seaborn as sns
sns.set(color_codes=True)

data = pd.read_excel('train.xlsx')

data.head()

data.describe()

data.dtypes

df = data

col_sal = data[['Salary','CollegeTier', 'GraduationYear', 'CollegeState']]

col_sal

col_sal.apply(lambda x: x.count(), axis=1)

col_sal.isnull().sum(axis = 0) # checking if any calumn

col_sal.isnull().sum(axis = 1) #cheackinh each row

col_sal.plot.bar()

data.columns

data.set_index("ID" ,inplace=True)

data.head()

col_sal.set_index("CollegeState", inplace=True)

df = col_sal

col_sal

df = df.groupby('CollegeState').nunique()

df

fig = plt.gcf();
fig.set_size_inches(15, 6);
ax=sns.barplot(x="CollegeState", y="Salary", data=col_sal);
#ax.set(xlabel="CollegeState", ylabel = "Salary")
ax.set_xticklabels(ax.get_xticklabels(), rotation=45);

for i in range(1,8):
    seriesObj = data.apply(lambda x: True if x['Salary'] <= 250000*i  else False , axis=1)
    # Count number of True in series
    numOfRows = len(seriesObj[seriesObj == True].index)
 
    print('Number of Rows in dataframe in which Salary %d  : '%((250000*i)), numOfRows)

sal_high = data[data.Salary >980000]

sal_high

data['DOB']=pd.to_datetime(data['DOB'])
data['Dyear']=data['DOB'].dt.year
data.drop(columns=['DOB'],axis=1,inplace=True)

data.head()

data.drop(['Unnamed: 0'], axis=1, inplace=True)

data.set_index("ID", inplace=True)

data.head()

data['DOJ']=pd.to_datetime(data['DOJ'])
data['JYEAR']=data['DOJ'].dt.year
data.drop(columns=['DOJ'],axis=1,inplace=True)

data.head()

data['Specialization'].unique()

specialization_map = \
{'electronics and communication engineering' : 'EC',
 'computer science & engineering' : 'CS',
 'information technology' : 'CS' ,
 'computer engineering' : 'CS',
 'computer application' : 'CS',
 'mechanical engineering' : 'ME',
 'electronics and electrical engineering' : 'EC',
 'electronics & telecommunications' : 'EC',
 'electrical engineering' : 'EL',
 'electronics & instrumentation eng' : 'EC',
 'civil engineering' : 'CE',
 'electronics and instrumentation engineering' : 'EC',
 'information science engineering' : 'CS',
 'instrumentation and control engineering' : 'EC',
 'electronics engineering' : 'EC',
 'biotechnology' : 'other',
 'other' : 'other',
 'industrial & production engineering' : 'other',
 'chemical engineering' : 'other',
 'applied electronics and instrumentation' : 'EC',
 'computer science and technology' : 'CS',
 'telecommunication engineering' : 'EC',
 'mechanical and automation' : 'ME',
 'automobile/automotive engineering' : 'ME',
 'instrumentation engineering' : 'EC',
 'mechatronics' : 'ME',
 'electronics and computer engineering' : 'CS',
 'aeronautical engineering' : 'ME',
 'computer science' : 'CS',
 'metallurgical engineering' : 'other',
 'biomedical engineering' : 'other',
 'industrial engineering' : 'other',
 'information & communication technology' : 'EC',
 'electrical and power engineering' : 'EL',
 'industrial & management engineering' : 'other',
 'computer networking' : 'CS',
 'embedded systems technology' : 'EC',
 'power systems and automation' : 'EL',
 'computer and communication engineering' : 'CS',
 'information science' : 'CS',
 'internal combustion engine' : 'ME',
 'ceramic engineering' : 'other',
 'mechanical & production engineering' : 'ME',
 'control and instrumentation engineering' : 'EC',
 'polymer technology' : 'other',
 'electronics' : 'EC'}

for i in range(1,8):
    seriesObj = data.apply(lambda x: True if x['Salary'] <= 250000*i  else False , axis=1)
    # Count number of True in series
    numOfRows = len(seriesObj[seriesObj == True].index)
 
    print('Number of Rows in dataframe in which Salary %d  : '%((250000*i)), numOfRows)

indexNames = data[ data['Salary'] > 1000000 ].index
 
# Delete these row indexes from dataFrame
data.drop(indexNames , inplace=True)
data.shape

data['Specialization'] = data['Specialization'].map(specialization_map)

data['Specialization'].value_counts().plot(kind='bar', figsize=(15,5))

print(data['Specialization'].unique())

data.head()

data.drop(columns=['DOL'], inplace=True)

clean_data = pd.DataFrame()

clean_data=data[data['ComputerScience']>0]

clean_data

clean_data.drop(columns=[ 
       'CollegeCityTier', '10board','CollegeState','ElectronicsAndSemicon',
        'MechanicalEngg', 'ElectricalEngg', 'TelecomEngg',
       'CivilEngg'],axis=1,inplace=True)

clean_data.head()

clean_data.to_csv('trial_data_1.csv')

male_count = clean_data['Gender'].where(clean_data['Gender']=='m').count()

female_count = clean_data['Gender'].where(clean_data['Gender']=='f').count()

print(male_count)
print(female_count)

clean_data['Gender'].value_counts().plot(kind='bar', figsize=(7, 7))

clean_data['Degree'].value_counts().plot(kind='bar', figsize=(7,7))

clean_data['JYEAR'].value_counts().plot(kind='bar', figsize=(7, 7))

clean_data['Salary'].value_counts().plot(kind='bar', figsize=(25, 15))

fig = plt.gcf();
fig.set_size_inches(15, 6);
ax=sns.barplot(x="JYEAR",y="Salary", data=clean_data, hue="Gender")
#ax.set(xlabel="CollegeState", ylabel = "Salary")
# ax.set_xticklabels(ax.get_xticklabels(), rotation=45);

clean_data['JobCity'].value_counts().plot(kind='bar', figsize=(25, 15))

clean_data['Specialization'].value_counts().plot(kind='bar', figsize=(25, 15))

"""# ## RELATIONSHIP BETWEEN THE FEILDS"""

fig = plt.gcf()
fig.set_size_inches(15, 8)
sns.scatterplot(x="10percentage", y="Salary", data=clean_data)
#10 percent vs salary

fig = plt.gcf()
fig.set_size_inches(25, 12)
sns.scatterplot(x="10percentage", y="Salary", data=clean_data, hue="12percentage")
#10, 12 percent vs salary

fig = plt.gcf()
fig.set_size_inches(25, 12)
sns.scatterplot(x="10percentage", y="Salary", data=clean_data, hue="12percentage", style="Gender")
#10, 12 percent vs salary for male and female

fig = plt.gcf()
fig.set_size_inches(15, 8)
sns.regplot(x="collegeGPA", y="Salary", data=clean_data, marker="+")
#college gpa vs salary

fig = plt.gcf()
fig.set_size_inches(15, 8)
sns.regplot(x="ComputerProgramming", y="Salary", data=clean_data, marker="+")
#college gpa vs salary

"""## line plot relation between possiable factors"""

indexNames = clean_data[ clean_data['collegeGPA'] < 50 ].index
 
# Delete these row indexes from dataFrame
clean_data.drop(indexNames , inplace=True)
clean_data.shape

fig = plt.gcf()
fig.set_size_inches(25, 12)
sns.lineplot(x="collegeGPA", y="Salary", data=clean_data, hue="Gender")

clean_data

fig = plt.gcf()
fig.set_size_inches(10, 7)
sns.lineplot(x="JYEAR", y="Salary", data=clean_data)

fig = plt.gcf()
fig.set_size_inches(10, 7)
sns.lineplot(x="Logical", y="Salary", data=clean_data)

#creating a  column for average macat score and average academics score
clean_data['AMCAT']=(clean_data['Logical']+clean_data['Quant']+clean_data['English'])/3
clean_data['ACAD']=clean_data['10percentage']+clean_data['12percentage']+clean_data['collegeGPA']/3

clean_data

fig = plt.gcf()
fig.set_size_inches(25, 15)
sns.lineplot(x="AMCAT", y="Salary", data=clean_data)

fig = plt.gcf()
fig.set_size_inches(25, 10)
sns.lineplot(x="ACAD", y="Salary", data=clean_data)

fig = plt.gcf()
fig.set_size_inches(15, 10)
sns.regplot(x="AMCAT", y="Salary", data=clean_data);

plt.figure(figsize= (15,15), dpi=100)
sns.heatmap(data.corr())

fig = plt.gcf();
fig.set_size_inches(25, 15)
sns.heatmap(clean_data.corr(), annot=True);

